{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "f4d6a461",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "2ed832e3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Cases\n",
      "0       2\n",
      "1       1\n",
      "2       5\n",
      "3       4\n",
      "4       3\n",
      "5       1\n",
      "6       1\n",
      "7       5\n",
      "8       4\n",
      "9       6\n",
      "10      4\n",
      "11      6\n",
      "12      5\n",
      "13      6\n",
      "14     10\n",
      "15      7\n",
      "16      4\n",
      "17     15\n",
      "18     25\n",
      "19     20\n",
      "20     16\n",
      "21     27\n",
      "22     39\n",
      "23     46\n",
      "24     22\n",
      "25     35\n",
      "26     44\n",
      "27     46\n"
     ]
    }
   ],
   "source": [
    "#1a\n",
    "df1 = pd.read_table('~/Desktop/BIA385/Nebraska Positive Cases Per Date.txt')\n",
    "pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None) \n",
    "print(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "2d461e00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cases\n",
      "2\n",
      "1\n",
      "5\n",
      "4\n",
      "3\n",
      "1\n",
      "1\n",
      "5\n",
      "4\n",
      "6\n",
      "4\n",
      "6\n",
      "5\n",
      "6\n",
      "10\n",
      "7\n",
      "4\n",
      "15\n",
      "25\n",
      "20\n",
      "16\n",
      "27\n",
      "39\n",
      "46\n",
      "22\n",
      "35\n",
      "44\n",
      "46\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#1a\n",
    "with open('Desktop/BIA385/Nebraska Positive Cases Per Date.txt',\"r\") as a_file:\n",
    "    print(a_file.read())\n",
    "\n",
    "a_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "c6b97014",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "409\n"
     ]
    }
   ],
   "source": [
    "#1b\n",
    "column_name = 'Cases'\n",
    "column_sum = df1[column_name].sum()\n",
    "print(column_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "6ea3dac4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.607142857142858\n"
     ]
    }
   ],
   "source": [
    "#1c\n",
    "aveDay = df1['Cases'].mean()\n",
    "print(aveDay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "c5a4330b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46\n"
     ]
    }
   ],
   "source": [
    "#1d\n",
    "column1 = df1['Cases']\n",
    "maxVal = column1.max()\n",
    "print(maxVal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "b84fe026",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-04-02 00:00:00\n"
     ]
    }
   ],
   "source": [
    "#1e\n",
    "import pandas as pd\n",
    "startdate = \"03/08/2020\"\n",
    "enddate = pd.to_datetime(startdate) + pd.DateOffset(days=25)\n",
    "print(enddate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "c4d16b14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Positive_Cases_Per_Date</th>\n",
       "      <th>Total_Positive_Cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3/8/2020</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3/10/2020</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3/12/2020</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3/13/2020</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3/14/2020</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3/15/2020</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date  Positive_Cases_Per_Date  Total_Positive_Cases\n",
       "0   3/8/2020                        2                     2\n",
       "1  3/10/2020                        1                     3\n",
       "2  3/12/2020                        5                     8\n",
       "3  3/13/2020                        4                    12\n",
       "4  3/14/2020                        3                    15\n",
       "5  3/15/2020                        1                    16"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2 & 2a\n",
    "df2 = pd.read_csv('~/Desktop/BIA385/Nebraska_Coronavirsu_PositiveCases (1).csv')\n",
    "df2.head(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "4c471641",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Positive_Cases_Per_Date</th>\n",
       "      <th>Total_Positive_Cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3/8/2020</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Date  Positive_Cases_Per_Date  Total_Positive_Cases\n",
       "0  3/8/2020                        2                     2"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2a\n",
    "df2.iloc[0:1,0:3]\n",
    "#2 cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "d095a11b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#2b\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df2.plot(kind = 'scatter',\n",
    "        x = 'Total_Positive_Cases',\n",
    "        y = 'Date',\n",
    "        color = 'blue')\n",
    "  \n",
    "# set the title\n",
    "plt.title('CoronaVirus Positive Cases in Nebraska Over time')\n",
    "  \n",
    "# show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "ab40c472",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Date  NEW_COVID_CASE_COUNT_Nebraska  NEW_COVID_CASE_COUNT_NewYork  \\\n",
      "0    3/2/2020                              0                             1   \n",
      "1    3/3/2020                              0                             2   \n",
      "2    3/4/2020                              0                            10   \n",
      "3    3/5/2020                              0                             2   \n",
      "4    3/6/2020                              0                             8   \n",
      "5    3/7/2020                              0                            13   \n",
      "6    3/8/2020                              2                            20   \n",
      "7    3/9/2020                              0                            53   \n",
      "8   3/10/2020                              1                            71   \n",
      "9   3/11/2020                              0                           156   \n",
      "10  3/12/2020                              5                           357   \n",
      "11  3/13/2020                              4                           614   \n",
      "12  3/14/2020                              3                           629   \n",
      "13  3/15/2020                              1                          1008   \n",
      "14  3/16/2020                              1                          2033   \n",
      "15  3/17/2020                              5                          2335   \n",
      "16  3/18/2020                              4                          2791   \n",
      "17  3/19/2020                              6                          3463   \n",
      "18  3/20/2020                              4                          3699   \n",
      "19  3/21/2020                              6                          2179   \n",
      "20  3/22/2020                              5                          2057   \n",
      "21  3/23/2020                              6                          3114   \n",
      "22  3/24/2020                             10                          3525   \n",
      "23  3/25/2020                              7                          3837   \n",
      "24  3/26/2020                              4                          3960   \n",
      "25  3/27/2020                             15                          4010   \n",
      "26  3/28/2020                             25                          2388   \n",
      "27  3/29/2020                             20                          2652   \n",
      "28  3/30/2020                             16                          4356   \n",
      "29  3/31/2020                             27                          3710   \n",
      "30   4/1/2020                             39                          3571   \n",
      "31   4/2/2020                             47                          3905   \n",
      "32   4/3/2020                             22                          3250   \n",
      "33   4/4/2020                             35                          1091   \n",
      "34   4/5/2020                             44                          1100   \n",
      "35  04/06/202                             46                          1200   \n",
      "\n",
      "    total_NE  total_NY  \n",
      "0          0         1  \n",
      "1          0         3  \n",
      "2          0        13  \n",
      "3          0        15  \n",
      "4          0        23  \n",
      "5          0        36  \n",
      "6          2        56  \n",
      "7          2       109  \n",
      "8          3       180  \n",
      "9          3       336  \n",
      "10         8       693  \n",
      "11        12      1307  \n",
      "12        15      1936  \n",
      "13        16      2944  \n",
      "14        17      4977  \n",
      "15        22      7312  \n",
      "16        26     10103  \n",
      "17        32     13566  \n",
      "18        36     17265  \n",
      "19        42     19444  \n",
      "20        47     21501  \n",
      "21        53     24615  \n",
      "22        63     28140  \n",
      "23        70     31977  \n",
      "24        74     35937  \n",
      "25        89     39947  \n",
      "26       114     42335  \n",
      "27       134     44987  \n",
      "28       150     49343  \n",
      "29       177     53053  \n",
      "30       216     56624  \n",
      "31       263     60529  \n",
      "32       285     63779  \n",
      "33       320     64870  \n",
      "34       364     65970  \n",
      "35       410     67170  \n"
     ]
    }
   ],
   "source": [
    "#3\n",
    "df3 = pd.read_csv('~/Desktop/BIA385/NewYork_Nebraska_PositiveCases (1).csv')\n",
    "pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None) \n",
    "print(df3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "daa6650f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>NEW_COVID_CASE_COUNT_Nebraska</th>\n",
       "      <th>NEW_COVID_CASE_COUNT_NewYork</th>\n",
       "      <th>total_NE</th>\n",
       "      <th>total_NY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3/2/2020</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3/3/2020</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3/4/2020</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3/5/2020</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3/6/2020</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3/7/2020</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Date  NEW_COVID_CASE_COUNT_Nebraska  NEW_COVID_CASE_COUNT_NewYork  \\\n",
       "0  3/2/2020                              0                             1   \n",
       "1  3/3/2020                              0                             2   \n",
       "2  3/4/2020                              0                            10   \n",
       "3  3/5/2020                              0                             2   \n",
       "4  3/6/2020                              0                             8   \n",
       "5  3/7/2020                              0                            13   \n",
       "\n",
       "   total_NE  total_NY  \n",
       "0         0         1  \n",
       "1         0         3  \n",
       "2         0        13  \n",
       "3         0        15  \n",
       "4         0        23  \n",
       "5         0        36  "
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#3a\n",
    "df3.head(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "f9922737",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>NEW_COVID_CASE_COUNT_Nebraska</th>\n",
       "      <th>NEW_COVID_CASE_COUNT_NewYork</th>\n",
       "      <th>total_NE</th>\n",
       "      <th>total_NY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>4/2/2020</td>\n",
       "      <td>47</td>\n",
       "      <td>3905</td>\n",
       "      <td>263</td>\n",
       "      <td>60529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>4/3/2020</td>\n",
       "      <td>22</td>\n",
       "      <td>3250</td>\n",
       "      <td>285</td>\n",
       "      <td>63779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>4/4/2020</td>\n",
       "      <td>35</td>\n",
       "      <td>1091</td>\n",
       "      <td>320</td>\n",
       "      <td>64870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>4/5/2020</td>\n",
       "      <td>44</td>\n",
       "      <td>1100</td>\n",
       "      <td>364</td>\n",
       "      <td>65970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>04/06/202</td>\n",
       "      <td>46</td>\n",
       "      <td>1200</td>\n",
       "      <td>410</td>\n",
       "      <td>67170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  NEW_COVID_CASE_COUNT_Nebraska  NEW_COVID_CASE_COUNT_NewYork  \\\n",
       "31   4/2/2020                             47                          3905   \n",
       "32   4/3/2020                             22                          3250   \n",
       "33   4/4/2020                             35                          1091   \n",
       "34   4/5/2020                             44                          1100   \n",
       "35  04/06/202                             46                          1200   \n",
       "\n",
       "    total_NE  total_NY  \n",
       "31       263     60529  \n",
       "32       285     63779  \n",
       "33       320     64870  \n",
       "34       364     65970  \n",
       "35       410     67170  "
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#3a\n",
    "df3.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "4be7d4ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "410\n"
     ]
    }
   ],
   "source": [
    "#3b\n",
    "neb_column = \"NEW_COVID_CASE_COUNT_Nebraska\"\n",
    "tot_nebcases = df3[neb_column].sum()\n",
    "print(tot_nebcases)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "ae4a4bb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67170\n"
     ]
    }
   ],
   "source": [
    "#3c\n",
    "ny_column = \"NEW_COVID_CASE_COUNT_NewYork\"\n",
    "tot_nycases = df3[ny_column].sum()\n",
    "print(tot_nycases)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "48ea7aa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#3d\n",
    "import matplotlib.pyplot as plt\n",
    "covCount = [410, 67170]\n",
    "places = ['NEW_COVID_CASE_COUNT_Nebraska', 'NEW_COVID_CASE_COUNT_NewYork']\n",
    "colors = ['r', 'b']\n",
    "plt.pie(covCount, labels=places, colors=colors, autopct='%.1f%%')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "66eda91b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#3e\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "deez = pd.read_csv('~/Desktop/BIA385/NewYork_Nebraska_PositiveCases (1).csv')\n",
    "\n",
    "plt.title('NE number of cases over time', fontsize=17)\n",
    "\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Total number of cases')\n",
    "\n",
    "plt.plot(deez[\"Date\"], deez[\"total_NE\"])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "659e805a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#3e\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "deez = pd.read_csv('~/Desktop/BIA385/NewYork_Nebraska_PositiveCases (1).csv')\n",
    "\n",
    "plt.title('NY number of cases over time', fontsize=17)\n",
    "\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Total number of cases')\n",
    "\n",
    "plt.plot(deez[\"Date\"], deez[\"total_NY\"])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "9c5f13ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.38888888888889\n",
      "1865.8333333333333\n"
     ]
    }
   ],
   "source": [
    "#3f\n",
    "mean_NE = df3['NEW_COVID_CASE_COUNT_Nebraska'].mean()\n",
    "print(mean_NE)\n",
    "\n",
    "mean_NY = df3['NEW_COVID_CASE_COUNT_NewYork'].mean()\n",
    "print(mean_NY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "780dba9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NEW_COVID_CASE_COUNT_Nebraska</th>\n",
       "      <th>NEW_COVID_CASE_COUNT_NewYork</th>\n",
       "      <th>total_NE</th>\n",
       "      <th>total_NY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>36.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>36.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>11.388889</td>\n",
       "      <td>1865.833333</td>\n",
       "      <td>85.138889</td>\n",
       "      <td>23086.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.607782</td>\n",
       "      <td>1559.629342</td>\n",
       "      <td>114.318891</td>\n",
       "      <td>24327.283894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>134.750000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>297.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>2045.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>15415.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>3478.500000</td>\n",
       "      <td>119.000000</td>\n",
       "      <td>42998.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>4356.000000</td>\n",
       "      <td>410.000000</td>\n",
       "      <td>67170.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       NEW_COVID_CASE_COUNT_Nebraska  NEW_COVID_CASE_COUNT_NewYork  \\\n",
       "count                      36.000000                     36.000000   \n",
       "mean                       11.388889                   1865.833333   \n",
       "std                        14.607782                   1559.629342   \n",
       "min                         0.000000                      1.000000   \n",
       "25%                         1.000000                    134.750000   \n",
       "50%                         5.000000                   2045.000000   \n",
       "75%                        17.000000                   3478.500000   \n",
       "max                        47.000000                   4356.000000   \n",
       "\n",
       "         total_NE      total_NY  \n",
       "count   36.000000     36.000000  \n",
       "mean    85.138889  23086.000000  \n",
       "std    114.318891  24327.283894  \n",
       "min      0.000000      1.000000  \n",
       "25%      3.000000    297.000000  \n",
       "50%     34.000000  15415.500000  \n",
       "75%    119.000000  42998.000000  \n",
       "max    410.000000  67170.000000  "
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#3g\n",
    "df3.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f6053c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
